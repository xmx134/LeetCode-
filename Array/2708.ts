// 2708. 一个小组的最大实力值
// 给你一个下标从 0 开始的整数数组 nums ，它表示一个班级中所有学生在一次考试中的成绩。
// 老师想选出一部分同学组成一个 非空 小组，且这个小组的 实力值 最大，
// 如果这个小组里的学生下标为 i0, i1, i2, ... , ik ，
// 那么这个小组的实力值定义为 nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​] 。
// 请你返回老师创建的小组能得到的最大实力值为多少。
// 示例 1：
// 输入：nums = [3,-1,-5,2,5,-9]
// 输出：1350
// 解释：一种构成最大实力值小组的方案是选择下标为 [0,2,3,4,5] 的学生。
// 实力值为 3 * (-5) * 2 * 5 * (-9) = 1350 ，这是可以得到的最大实力值。
// 示例 2：
// 输入：nums = [-4,-5,-4]
// 输出：20
// 解释：选择下标为 [0, 1] 的学生。得到的实力值为 20 。我们没法得到更大的实力值。
// 思路：
// 当只有1位时，直接返回；当数组内只有一位小于0，其余全是0，返回0；
// 排序后判断小于零的数是否连续两位都是负数，都是负数才纳入最终结果，遇到正数直接相乘。
// 核心：
// Array.sort()
function maxStrength(nums: number[]): number {
  if (nums.length === 1) return nums[0]
  nums.sort((a, b) => a - b)
  if (nums[1] === 0 && nums[nums.length - 1] === 0) return 0
  let ret: number = 1
  let i: number = 0
  while (i < nums.length) {
    if (nums[i] > 0) {
      ret *= nums[i]
    } else if (nums[i + 1] < 0) {
      ret = ret * nums[i] * nums[i + 1]
      i++
    }
    i++
  }
  return ret
}
